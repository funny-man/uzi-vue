@import './var.scss';
// 控制用户是否可以选中文本
@mixin utils-user-select($value) {
  -moz-user-select: $value;
  -webkit-user-select: $value;
  -ms-user-select: $value;
}
// 换行省略
@mixin utils-ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
// 清除浮动
@mixin utils-clearfix {
  @at-root {
    &::before,
    &::after {
      display: table;
      content: "";
    }
    &::after {
      clear: both
    }
  }
}

// button阴影
@mixin btn-shadow($color, $alpha) {
  box-shadow: 0 3px 9px rgba($color: $color, $alpha: $alpha);
}

// button通过传入主色设置边框色,悬浮颜色,聚焦颜色...
@mixin button-type($color, $background-color, $border-color, $name) {
  color: $color;
  background-color: $background-color;
  border-color: $border-color;
  &:hover,
  &:focus {
    background: mix(#ffffff, $background-color, 10%);
    border-color: mix(#ffffff, $border-color, 10%);
    color: $color;
  }
  &:active {
    background: mix(#000000, $background-color, 10%);
    border-color: mix(#000000, $border-color, 10%);
    color: $color;
    outline: none;
  }
  &.is-shadow {
    @include btn-shadow($background-color,.5);
  }
  // 幽灵按钮样式
  &.is-ghost {
    @include button-air ($background-color,solid)
  }
  // 虚线按钮样式
  &.is-dashed{
    @include button-air ($background-color,dashed);
  }
  // 点击按钮特效
  &.spread {
    animation: .8s $name linear;
    @keyframes #{$name} {
      0% {box-shadow: 0 0 0 0 rgba($color: $background-color, $alpha: .3);}
     20% {box-shadow: 0 0 0 6px rgba($color: $background-color, $alpha: .2);}
    100% {box-shadow: 0 0 0 6px rgba($color: $background-color, $alpha: 0);}
   }
  }
  // 禁用状态样式
  &.is-disabled {
    cursor:not-allowed;
    box-shadow: 0 0 0 rgba(0, 0, 0, 0);
    &,
    &:hover,
    &:focus,
    &:active {
      color: mix(#ffffff, $background-color, 60%);
      background-color: mix(#ffffff, $background-color, 20%);
      border-color: mix(#ffffff, $background-color, 20%);
    }
  } 
}

@mixin button-air ($color,$line-type){
  background-color: rgba($color: $color, $alpha: 0);
  color: $color;
  border-color: $color;
  border-style: $line-type;
  box-shadow: 0 0 0 rgba(0, 0, 0, 0);
  &:hover,
  &:focus {
    color: mix(#ffffff, $color, 10%);
    background-color: rgba($color: $color, $alpha: 0.1);
    border-style: $line-type;
  }

  &:active {
    color: mix(#000000, $color, 2%);
    background-color: rgba($color: $color, $alpha: 0.2);
    border-style: $line-type;
    outline: none;
  }
  // 按钮幽灵禁用状态样式
  &.is-disabled {
    cursor:not-allowed;
    box-shadow: 0 0 0 rgba(0, 0, 0, 0);
    &,
    &:hover,
    &:focus,
    &:active {
      color: mix(#ffffff, $color, 60%);
      background-color: mix(#ffffff, $color, 95%);
      border-color: mix(#ffffff, $color, 80%);
    }
  } 
}


// input-按钮位置
@mixin input-icon($w) {
  >.input{
    padding-#{$w}: 36px;
  }
  >.z-icon {
    position: absolute;
    top: 0;
    #{$w}: 14px;
    bottom: 0;
    margin: auto;
  }
}

// 栅格布局响应式样式
@mixin grid-media($key, $map: $_media_points) {
  // map-has-key($map, $key)判断传入的$key是否在$map: $_media_points中有没有定义
  // map-get($map, $key)获取$map中的 $key的值
  // inspect($value) Maps不能转换为纯CSS。作为变量的值或参数传递给CSS函数将会导致错误。 使用inspect($value)函数以产生输出字符串，这对于调试 maps 非常有用。
  @if map-has-key($map, $key) {
    @media only screen and #{inspect(map-get($map, $key))}{
      @content;
    }
  } @else {
    @warn "没有定义: `#{$map}`";
  }
}